name: hotrod-benchmark
# Just connect to first server, it will give us the whole list
hotrod:
- uri: hotrod://{{ user }}:{{ pass }}@{{ groups['server'][0] }}:11222
  caches:
  - {{ cache_name }}
# List of agents the Controller should deploy
agents:
{% for agent in groups[hyperfoil_agent_group] %}
  {{ agent }}:
    name: "{{ hostvars[agent]['inventory_hostname'] }}:{{ hyperfoil_agent_port }}"
    {% if ssh_key is defined -%}
    sshKey: "{{ ssh_key }}"
    {% endif -%}
    extras: "{{ agent_java_args | default('') }}"
{% endfor %}

phases:
- load:
    atOnce:
      users: 1
      isWarmup: true
      scenario:
      - populate:
        - loop:
            counterVar: key
            repeats: {{ number_entries }}
            steps:
              - randomUUID: cacheValue
              - hotrodRequest:
                  put: {{ cache_name }}
                  key: key-${key}
                  value: value-${cacheValue}

{% if write_ratio > 0 %}
- rampupPut:
    increasingRate:
      startAfter: load
      duration: 30s
      initialUsersPerSec: 2
      targetUsersPerSec: 200
      maxSessions: 200
      isWarmup: true
      scenario: &put
      - putData:
        - randomInt: cacheKey <- 1 .. {{ number_entries }}
        - randomUUID: cacheValue
        - hotrodRequest:
            put: {{ cache_name }}
            key: key-${cacheKey}
            value: value-${cacheValue}
{% endif %}

{% if read_ratio > 0 %}
- rampupGet:
    increasingRate:
      startAfter: load
      duration: 30s
      initialUsersPerSec: 2
      targetUsersPerSec: 200
      maxSessions: 200
      isWarmup: true
      scenario: &get
      - getData:
        - randomInt: cacheKey <- 0 .. {{ number_entries }}
        - hotrodRequest:
            get: {{ cache_name }}
            key: key-${cacheKey}
{% endif %}

{% if write_ratio > 0 %}
- performWrites:
    increasingRate:
      startAfter: rampupPut
      duration: 4m
      initialUsersPerSec: {{ (write_ratio * load_multiplier * groups[hyperfoil_agent_group] | length) | int }}
      targetUsersPerSec: {{ (write_ratio * 10 * load_multiplier * groups[hyperfoil_agent_group] | length) | int }}
      maxSessions: {{ (write_ratio * 2 * 10 * load_multiplier * groups[hyperfoil_agent_group] | length) | int }}
      scenario: *put
{% endif %}

{% if read_ratio > 0 %}
- performReads:
    increasingRate:
      startAfter: rampupGet
      duration: 4m
      initialUsersPerSec: {{ (read_ratio * load_multiplier * groups[hyperfoil_agent_group] | length) | int }}
      targetUsersPerSec: {{ (read_ratio * 10 * load_multiplier * groups[hyperfoil_agent_group] | length) | int }}
      maxSessions: {{ (read_ratio * 2 * 10 * load_multiplier * groups[hyperfoil_agent_group] | length) | int }}
      scenario: *get
{% endif %}
